import { 
    ButtonBuilder, 
    ButtonStyle, 
    ActionRowBuilder,
    EmbedBuilder,
    Colors
} from 'discord.js';
import { logger } from '../utils/logger.js';
import { database } from '../database/database.js';

export async function handleSetupButtonInteraction(interaction) {
    const customId = interaction.customId;
    
    try {
        await interaction.deferUpdate();
        
        switch (customId) {
            case 'setup_verify':
                await handleVerifyButton(interaction);
                break;
            case 'setup_permissions':
                await handlePermissionsButton(interaction);
                break;
            case 'setup_status':
                await handleStatusButton(interaction);
                break;
            case 'reset_confirm':
                await handleResetConfirm(interaction);
                break;
            case 'reset_cancel':
                await handleResetCancel(interaction);
                break;
            case 'verify_user':
            case 'quick_verify':
                await handleUserVerification(interaction);
                break;
            case 'view_rules':
                await handleViewRules(interaction);
                break;
            case 'view_memberships':
                await handleViewMemberships(interaction);
                break;
            case 'verify_help':
                await handleVerificationHelp(interaction);
                break;
            case 'back_to_welcome':
                await handleBackToWelcome(interaction);
                break;
            case 'explore_community':
                await handleExploreCommunity(interaction);
                break;
            default:
                await interaction.editReply({
                    content: '‚ùå Interacci√≥n no reconocida.'
                });
        }
    } catch (error) {
        logger.error('Error en handleSetupButtonInteraction:', error);
        try {
            await interaction.editReply({
                content: '‚ùå Hubo un error procesando tu solicitud.'
            });
        } catch (replyError) {
            logger.error('Error editando respuesta:', replyError);
        }
    }
}

async function handleVerifyButton(interaction) {
    const guild = interaction.guild;
    const serverConfig = await database.getServerConfig(guild.id);
    
    const verificationResults = {
        database: !!serverConfig,
        roles: await verifyRoles(guild),
        channels: await verifyChannels(guild),
        permissions: await verifyPermissions(guild),
        webhook: await verifyWebhook(guild)
    };

    const allGood = Object.values(verificationResults).every(result => result === true);

    const verificationEmbed = new EmbedBuilder()
        .setTitle('‚úÖ Verificaci√≥n del Sistema')
        .setDescription(allGood ? 
            'üéâ Todo est√° configurado correctamente' : 
            '‚ö†Ô∏è Se encontraron algunos problemas'
        )
        .setColor(allGood ? Colors.Green : Colors.Orange)
        .addFields(
            { name: 'Base de Datos', value: verificationResults.database ? '‚úÖ' : '‚ùå', inline: true },
            { name: 'Roles', value: verificationResults.roles ? '‚úÖ' : '‚ùå', inline: true },
            { name: 'Canales', value: verificationResults.channels ? '‚úÖ' : '‚ùå', inline: true },
            { name: 'Permisos', value: verificationResults.permissions ? '‚úÖ' : '‚ùå', inline: true },
            { name: 'Webhook', value: verificationResults.webhook ? '‚úÖ' : '‚ùå', inline: true }
        )
        .setTimestamp();

    const actionRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('setup_verify')
                .setLabel('üîÑ Verificar Nuevamente')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('setup_status')
                .setLabel('üìä Estado Detallado')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({ 
        embeds: [verificationEmbed], 
        components: [actionRow] 
    });
}

async function handlePermissionsButton(interaction) {
    const guild = interaction.guild;
    const requiredPermissions = [
        'ViewChannel', 'SendMessages', 'EmbedLinks', 'AttachFiles',
        'UseExternalEmojis', 'ManageRoles', 'ManageChannels',
        'ReadMessageHistory', 'AddReactions'
    ];

    const botMember = guild.members.cache.get(interaction.client.user.id);
    const botPermissions = botMember?.permissions.toArray() || [];
    
    const missingPermissions = requiredPermissions.filter(perm => !botPermissions.includes(perm));
    const hasAllPermissions = missingPermissions.length === 0;

    const statusEmbed = new EmbedBuilder()
        .setTitle('üîê Verificaci√≥n de Permisos')
        .setDescription(hasAllPermissions ? 
            '‚úÖ El bot tiene todos los permisos necesarios' : 
            '‚ùå El bot no tiene todos los permisos necesarios'
        )
        .setColor(hasAllPermissions ? Colors.Green : Colors.Red)
        .addFields(
            {
                name: 'Permisos Requeridos',
                value: requiredPermissions.map(perm => 
                    botPermissions.includes(perm) ? `‚úÖ ${perm}` : `‚ùå ${perm}`
                ).join('\n'),
                inline: false
            }
        )
        .setTimestamp();

    if (missingPermissions.length > 0) {
        statusEmbed.addFields({
            name: 'Permisos Faltantes',
            value: missingPermissions.join(', '),
            inline: false
        });
    }

    const actionRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('setup_permissions')
                .setLabel('üîÑ Verificar Permisos')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('setup_verify')
                .setLabel('üîç Verificaci√≥n Completa')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({ 
        embeds: [statusEmbed], 
        components: [actionRow] 
    });
}

async function handleStatusButton(interaction) {
    const guild = interaction.guild;
    const serverConfig = await database.getServerConfig(guild.id);
    
    const statusEmbed = new EmbedBuilder()
        .setTitle('üìä Estado Detallado del Servidor')
        .setDescription(`**Servidor:** ${guild.name}\n**ID:** ${guild.id}`)
        .setColor(Colors.Blue)
        .addFields(
            {
                name: 'Configuraci√≥n',
                value: serverConfig ? '‚úÖ Guardada en base de datos' : '‚ùå No configurado',
                inline: true
            },
            {
                name: 'Miembros',
                value: guild.memberCount.toString(),
                inline: true
            },
            {
                name: 'Canales',
                value: guild.channels.cache.size.toString(),
                inline: true
            },
            {
                name: 'Roles',
                value: guild.roles.cache.size.toString(),
                inline: true
            },
            {
                name: 'Bot Online',
                value: interaction.client.user.presence?.status === 'online' ? '‚úÖ' : '‚ùå',
                inline: true
            },
            {
                name: 'Ping',
                value: `${interaction.client.ws.ping}ms`,
                inline: true
            }
        )
        .setTimestamp();

    if (serverConfig) {
        statusEmbed.addFields({
            name: '√öltima Verificaci√≥n',
            value: new Date(serverConfig.last_verified).toLocaleString(),
            inline: false
        });

        if (serverConfig.trading_channel_id) {
            const tradingChannel = guild.channels.cache.get(serverConfig.trading_channel_id);
            statusEmbed.addFields({
                name: 'Canal de Trading',
                value: tradingChannel ? `‚úÖ ${tradingChannel.name}` : '‚ùå No encontrado',
                inline: true
            });
        }

        if (serverConfig.logs_channel_id) {
            const logsChannel = guild.channels.cache.get(serverConfig.logs_channel_id);
            statusEmbed.addFields({
                name: 'Canal de Logs',
                value: logsChannel ? `‚úÖ ${logsChannel.name}` : '‚ùå No encontrado',
                inline: true
            });
        }
    }

    const actionRow = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('setup_status')
                .setLabel('üîÑ Actualizar Estado')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('setup_verify')
                .setLabel('üîç Verificaci√≥n Completa')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.editReply({ 
        embeds: [statusEmbed], 
        components: [actionRow] 
    });
}

async function handleResetConfirm(interaction) {
    const guild = interaction.guild;
    
    try {
        // Eliminar configuraci√≥n de la base de datos
        await database.run('DELETE FROM server_config WHERE guild_id = ?', [guild.id]);
        
        const resetEmbed = new EmbedBuilder()
            .setTitle('üîÑ Configuraci√≥n Reseteada')
            .setDescription('La configuraci√≥n del servidor ha sido eliminada de la base de datos.')
            .setColor(Colors.Orange)
            .setTimestamp();

        await interaction.editReply({ 
            embeds: [resetEmbed],
            components: []
        });

        logger.info(`Configuraci√≥n reseteada para servidor ${guild.name} por ${interaction.user.tag}`);
    } catch (error) {
        logger.error('Error reseteando configuraci√≥n:', error);
        await interaction.editReply({
            content: '‚ùå Error al resetear la configuraci√≥n.'
        });
    }
}

async function handleResetCancel(interaction) {
    const cancelEmbed = new EmbedBuilder()
        .setTitle('‚ùå Reset Cancelado')
        .setDescription('La operaci√≥n de reset ha sido cancelada.')
        .setColor(Colors.Gray)
        .setTimestamp();

    await interaction.editReply({ 
        embeds: [cancelEmbed],
        components: []
    });
}

// Funciones auxiliares para verificaci√≥n
async function verifyRoles(guild) {
    const requiredRoles = [
        'Vitaly Signals Bot',
        'Signal Provider', 
        'Trading Assistant',
        'Market Analyst',
        'Trading Member'
    ];
    
    return requiredRoles.every(roleName => 
        guild.roles.cache.some(role => role.name === roleName)
    );
}

async function verifyChannels(guild) {
    const requiredChannels = [
        'vitaly-signals',
        'trading-logs',
        'trading-announcements'
    ];
    
    return requiredChannels.every(channelName => 
        guild.channels.cache.some(channel => channel.name === channelName)
    );
}

async function verifyPermissions(guild) {
    const botMember = guild.members.cache.get(guild.client.user.id);
    const requiredPermissions = ['ViewChannel', 'SendMessages', 'EmbedLinks', 'ManageRoles', 'ManageChannels'];
    const botPermissions = botMember?.permissions.toArray() || [];
    return requiredPermissions.every(perm => botPermissions.includes(perm));
}

async function verifyWebhook(guild) {
    const channel = guild.channels.cache.find(c => c.name === 'vitaly-signals');
    if (!channel) return false;
    
    try {
        const webhooks = await channel.fetchWebhooks();
        return webhooks.size > 0;
    } catch (error) {
        return false;
    }
}

// Funciones de verificaci√≥n de usuarios
async function handleUserVerification(interaction) {
    const guild = interaction.guild;
    const member = interaction.member;
    
    try {
        // Buscar el rol BDX VERIFIED
        const verifiedRole = guild.roles.cache.find(role => role.name === 'üîç BDX VERIFIED');
        
        if (!verifiedRole) {
            await interaction.editReply({
                content: '‚ùå El rol de verificaci√≥n no est√° configurado. Contacta a un administrador.'
            });
            return;
        }

        // Verificar si ya tiene el rol
        if (member.roles.cache.has(verifiedRole.id)) {
            const alreadyVerifiedEmbed = new EmbedBuilder()
                .setTitle('‚úÖ Ya Est√°s Verificado')
                .setDescription(`
**üéâ ¬°Felicidades!** Ya tienes el rol **üîç BDX VERIFIED**.

**üéØ Pr√≥ximos pasos:**
‚Ä¢ Explora la comunidad en #üí¨chat-general
‚Ä¢ Revisa las membres√≠as en #üí∞membres√≠as
‚Ä¢ Lee las reglas en #üìúreglas
‚Ä¢ ¬°Comienza a tradear! üöÄ
                `)
                .setColor(0x2ecc71)
                .setThumbnail('https://via.placeholder.com/64x64/2ECC71/FFFFFF?text=‚úì')
                .setFooter({ text: 'BDX Trades ‚Ä¢ Verificaci√≥n' })
                .setTimestamp();

            await interaction.editReply({ embeds: [alreadyVerifiedEmbed] });
            return;
        }

        // Asignar el rol de verificado
        await member.roles.add(verifiedRole);

        // Crear embed de verificaci√≥n exitosa
        const successEmbed = new EmbedBuilder()
            .setTitle('üéâ ¬°Verificaci√≥n Exitosa!')
            .setDescription(`
**‚úÖ ¬°Bienvenido a BDX Trades!**

Has sido verificado exitosamente y ahora tienes acceso a:

**üéØ Contenido Disponible:**
‚Ä¢ **Comunidad general** - #üí¨chat-general
‚Ä¢ **An√°lisis diarios** - #üìäan√°lisis-diarios
‚Ä¢ **Preguntas y respuestas** - #‚ùìpreguntas-y-respuestas
‚Ä¢ **Recursos educativos** - #üìötrading-academy

**üí∞ ¬øQuieres m√°s?**
Explora nuestras **membres√≠as premium** en #üí∞membres√≠as para acceder a:
‚Ä¢ Se√±ales de trading en tiempo real
‚Ä¢ An√°lisis profesionales
‚Ä¢ Chat VIP exclusivo
‚Ä¢ Mentor√≠a personalizada

**üëë Fundado por Vitaly** - Tu √©xito es nuestro objetivo
            `)
            .setColor(0x2ecc71)
            .setThumbnail('https://via.placeholder.com/128x128/2ECC71/FFFFFF?text=‚úì')
            .setImage('https://via.placeholder.com/600x200/2ECC71/FFFFFF?text=¬°BIENVENIDO+A+BDX+TRADES!')
            .setFooter({ text: 'BDX Trades ‚Ä¢ Comunidad Premium de Trading' })
            .setTimestamp();

        // Crear botones de acci√≥n
        const exploreButton = new ButtonBuilder()
            .setCustomId('explore_community')
            .setLabel('üåç Explorar Comunidad')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üåç');

        const membershipsButton = new ButtonBuilder()
            .setCustomId('view_memberships')
            .setLabel('üí∞ Ver Membres√≠as')
            .setStyle(ButtonStyle.Success)
            .setEmoji('üí∞');

        const rulesButton = new ButtonBuilder()
            .setCustomId('view_rules')
            .setLabel('üìú Ver Reglas')
            .setStyle(ButtonStyle.Secondary)
            .setEmoji('üìú');

        const actionRow = new ActionRowBuilder()
            .addComponents(exploreButton, membershipsButton, rulesButton);

        await interaction.editReply({ 
            embeds: [successEmbed], 
            components: [actionRow] 
        });

        // Enviar mensaje de bienvenida al canal de verificaci√≥n
        const welcomeChannel = guild.channels.cache.find(c => c.name === 'verificaci√≥n');
        if (welcomeChannel) {
            const welcomeMessage = new EmbedBuilder()
                .setTitle('üéâ Nuevo Miembro Verificado')
                .setDescription(`
**¬°Bienvenido ${member.user.username}!** üéä

Se ha unido a nuestra comunidad premium de trading y ya tiene acceso al contenido base.

**üéØ Pr√≥ximos pasos:**
‚Ä¢ Explora la comunidad
‚Ä¢ Considera una membres√≠a premium
‚Ä¢ ¬°Comienza a tradear!

**üëë BDX Trades** - Donde los traders se convierten en profesionales
                `)
                .setColor(0x2ecc71)
                .setThumbnail(member.user.displayAvatarURL())
                .setFooter({ text: 'BDX Trades ‚Ä¢ Nuevo Miembro' })
                .setTimestamp();

            await welcomeChannel.send({ embeds: [welcomeMessage] });
        }

        logger.info(`Usuario ${member.user.tag} verificado exitosamente`);

    } catch (error) {
        logger.error('Error verificando usuario:', error);
        await interaction.editReply({
            content: '‚ùå Error durante la verificaci√≥n. Contacta a un administrador.'
        });
    }
}

async function handleViewRules(interaction) {
    const rulesEmbed = new EmbedBuilder()
        .setTitle('üìú Reglas de BDX Trades')
        .setDescription(`
**üèõÔ∏è Bienvenido a BDX Trades - Comunidad Premium de Trading**

**üìã Reglas Generales:**
‚Ä¢ **Respeta a todos** los miembros de la comunidad
‚Ä¢ **No spam** ni contenido inapropiado
‚Ä¢ **Mant√©n la privacidad** - No compartas informaci√≥n personal
‚Ä¢ **Usa los canales correctos** para cada tipo de contenido
‚Ä¢ **Sigue las instrucciones** de los moderadores

**üíº Reglas de Trading:**
‚Ä¢ **No compartas se√±ales** de otras fuentes sin permiso
‚Ä¢ **Respeta la propiedad intelectual** de BDX Trades
‚Ä¢ **No hagas trading** con dinero que no puedas permitirte perder
‚Ä¢ **Mant√©n la confidencialidad** de las estrategias premium

**üéØ Reglas de Membres√≠as:**
‚Ä¢ **Tier 1 (B√°sico):** Acceso a comunidad general
‚Ä¢ **Tier 2 (VIP):** Acceso a se√±ales y an√°lisis premium
‚Ä¢ **Tier 3 (√âlite):** Acceso completo y mentor√≠a personalizada

**‚ö†Ô∏è Sanciones:**
‚Ä¢ **Primera infracci√≥n:** Advertencia
‚Ä¢ **Segunda infracci√≥n:** Mute temporal
‚Ä¢ **Tercera infracci√≥n:** Expulsi√≥n temporal
‚Ä¢ **Infracciones graves:** Expulsi√≥n permanente

**üìû Contacto:**
Para reportar infracciones o solicitar ayuda, contacta a un administrador.
        `)
        .setColor(0xe74c3c)
        .setThumbnail('https://via.placeholder.com/64x64/E74C3C/FFFFFF?text=üìú')
        .setFooter({ text: 'BDX Trades ‚Ä¢ Reglas y T√©rminos' })
        .setTimestamp();

    const backButton = new ButtonBuilder()
        .setCustomId('back_to_welcome')
        .setLabel('üè† Volver al Inicio')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üè†');

    const actionRow = new ActionRowBuilder()
        .addComponents(backButton);

    await interaction.editReply({ 
        embeds: [rulesEmbed], 
        components: [actionRow] 
    });
}

async function handleViewMemberships(interaction) {
    const membershipsEmbed = new EmbedBuilder()
        .setTitle('üí∞ Membres√≠as BDX Trades')
        .setDescription(`
**üèõÔ∏è BDX Trades - Comunidad Premium de Trading**

Elige tu nivel de membres√≠a y desbloquea acceso exclusivo a contenido premium, se√±ales de trading, an√°lisis profesionales y mucho m√°s.

**üéØ ¬øPor qu√© unirte a BDX Trades?**
‚Ä¢ **Se√±ales de trading** en tiempo real
‚Ä¢ **An√°lisis profesionales** del mercado
‚Ä¢ **Comunidad exclusiva** de traders
‚Ä¢ **Educaci√≥n premium** y mentor√≠a
‚Ä¢ **Herramientas avanzadas** de trading

**üìä Niveles de Membres√≠a:**
‚Ä¢ **üéñÔ∏è Tier 1 - Trader B√°sico** - Comunidad y an√°lisis
‚Ä¢ **üíé Tier 2 - Trader Avanzado** - Alertas y chat VIP
‚Ä¢ **üëë Tier 3 - Trader √âlite** - Clases 1-1 y mentor√≠a

**üí° ¬øListo para comenzar?**
Visita #üí∞membres√≠as para m√°s informaci√≥n detallada.
        `)
        .setColor(0xffd700)
        .setThumbnail('https://via.placeholder.com/128x128/FFD700/000000?text=BDX')
        .setFooter({ text: 'BDX Trades ‚Ä¢ Membres√≠as Premium' })
        .setTimestamp();

    const backButton = new ButtonBuilder()
        .setCustomId('back_to_welcome')
        .setLabel('üè† Volver al Inicio')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üè†');

    const actionRow = new ActionRowBuilder()
        .addComponents(backButton);

    await interaction.editReply({ 
        embeds: [membershipsEmbed], 
        components: [actionRow] 
    });
}

async function handleVerificationHelp(interaction) {
    const helpEmbed = new EmbedBuilder()
        .setTitle('‚ùì Ayuda con la Verificaci√≥n')
        .setDescription(`
**üéØ ¬øNecesitas ayuda con la verificaci√≥n?**

**üìã Pasos para verificar:**
1. **Haz clic en "Verificarme Ahora"** en el canal #üëãbienvenida
2. **Confirma tu identidad** siguiendo las instrucciones
3. **Recibe tu rol** üîç BDX VERIFIED autom√°ticamente
4. **Accede al contenido** premium de la comunidad

**üîí ¬øPor qu√© verificarse?**
‚Ä¢ **Acceso garantizado** al contenido
‚Ä¢ **Protecci√≥n contra bots** y spam
‚Ä¢ **Experiencia personalizada** seg√∫n tu tier
‚Ä¢ **Soporte prioritario** en la comunidad

**‚ùì ¬øProblemas comunes?**
‚Ä¢ **Bot√≥n no funciona:** Intenta recargar Discord
‚Ä¢ **No recibo el rol:** Espera unos segundos y verifica
‚Ä¢ **Error de permisos:** Contacta a un administrador

**üìû ¬øNecesitas m√°s ayuda?**
Contacta a un administrador en #üõ†Ô∏èsoporte-t√©cnico
        `)
        .setColor(0x3498db)
        .setThumbnail('https://via.placeholder.com/64x64/3498DB/FFFFFF?text=‚ùì')
        .setFooter({ text: 'BDX Trades ‚Ä¢ Ayuda' })
        .setTimestamp();

    const backButton = new ButtonBuilder()
        .setCustomId('back_to_welcome')
        .setLabel('üè† Volver al Inicio')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üè†');

    const actionRow = new ActionRowBuilder()
        .addComponents(backButton);

    await interaction.editReply({ 
        embeds: [helpEmbed], 
        components: [actionRow] 
    });
}

async function handleBackToWelcome(interaction) {
    const welcomeEmbed = new EmbedBuilder()
        .setTitle('üèõÔ∏è ¬°Bienvenido a BDX Trades!')
        .setDescription(`
**üéØ Comunidad Premium de Trading**

¬°Hola! Bienvenido a **BDX Trades**, la comunidad de trading m√°s exclusiva y profesional. Aqu√≠ encontrar√°s:

**‚ú® ¬øQu√© te espera?**
‚Ä¢ **Se√±ales de trading** en tiempo real
‚Ä¢ **An√°lisis profesionales** del mercado
‚Ä¢ **Comunidad exclusiva** de traders
‚Ä¢ **Educaci√≥n premium** y mentor√≠a
‚Ä¢ **Herramientas avanzadas** de trading

**üöÄ Para comenzar:**
1. **Lee las reglas** en #üìúreglas
2. **Completa tu verificaci√≥n** en #‚úÖverificaci√≥n
3. **Elige tu membres√≠a** en #üí∞membres√≠as
4. **¬°Comienza a tradear!** üéØ

**üëë Fundado por Vitaly** - Experto en trading con a√±os de experiencia
        `)
        .setColor(0xffd700)
        .setThumbnail('https://via.placeholder.com/128x128/FFD700/000000?text=BDX')
        .setImage('https://via.placeholder.com/600x200/FFD700/000000?text=BDX+TRADES+PREMIUM')
        .setFooter({ text: 'BDX Trades ‚Ä¢ Comunidad Premium de Trading' })
        .setTimestamp();

    // Crear bot√≥n de verificaci√≥n
    const verifyButton = new ButtonBuilder()
        .setCustomId('verify_user')
        .setLabel('‚úÖ Verificarme Ahora')
        .setStyle(ButtonStyle.Success)
        .setEmoji('‚úÖ');

    const rulesButton = new ButtonBuilder()
        .setCustomId('view_rules')
        .setLabel('üìú Ver Reglas')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üìú');

    const membershipsButton = new ButtonBuilder()
        .setCustomId('view_memberships')
        .setLabel('üí∞ Ver Membres√≠as')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('üí∞');

    const actionRow = new ActionRowBuilder()
        .addComponents(verifyButton, rulesButton, membershipsButton);

    await interaction.editReply({ 
        embeds: [welcomeEmbed], 
        components: [actionRow] 
    });
}

async function handleExploreCommunity(interaction) {
    const exploreEmbed = new EmbedBuilder()
        .setTitle('üåç Explora la Comunidad BDX Trades')
        .setDescription(`
**üéØ ¬°Bienvenido a la comunidad!**

Ahora que est√°s verificado, puedes explorar todos los canales disponibles:

**üè† INICIO:**
‚Ä¢ **#üëãbienvenida** - Mensaje de bienvenida
‚Ä¢ **#‚úÖverificaci√≥n** - Sistema de verificaci√≥n
‚Ä¢ **#üÜòsoporte-inicial** - Ayuda para nuevos miembros

**üì¢ INFORMACI√ìN OFICIAL:**
‚Ä¢ **#üìãsobre-bdx** - Informaci√≥n sobre BDX Trades
‚Ä¢ **#üìúreglas** - Reglas y t√©rminos
‚Ä¢ **#üì¢anuncios** - Anuncios importantes
‚Ä¢ **#üí∞membres√≠as** - Informaci√≥n de membres√≠as

**üë• COMUNIDAD (Tier 1):**
‚Ä¢ **#üí¨chat-general** - Chat general
‚Ä¢ **#üìàprofits** - Compartir ganancias
‚Ä¢ **#üìäan√°lisis-diarios** - An√°lisis del mercado
‚Ä¢ **#‚ùìpreguntas-y-respuestas** - Preguntas y respuestas

**üìö EDUCACI√ìN & RECURSOS:**
‚Ä¢ **#üìötrading-academy** - Academia de trading
‚Ä¢ **#üìùestrategias-pro** - Estrategias profesionales
‚Ä¢ **#üß†psicolog√≠a-del-trader** - Psicolog√≠a del trader
‚Ä¢ **#üõ†Ô∏èherramientas-y-plantillas** - Herramientas

**üîß SISTEMA & SOPORTE:**
‚Ä¢ **#ü§ñbot-commands** - Comandos del bot
‚Ä¢ **#üìäestad√≠sticas** - Estad√≠sticas del servidor
‚Ä¢ **#üõ†Ô∏èsoporte-t√©cnico** - Soporte t√©cnico
‚Ä¢ **#üì¢anuncios-sistema** - Anuncios del sistema

**üí° ¬øQuieres m√°s acceso?**
Considera una **membres√≠a premium** para acceder a contenido exclusivo.
        `)
        .setColor(0x2ecc71)
        .setThumbnail('https://via.placeholder.com/128x128/2ECC71/FFFFFF?text=üåç')
        .setFooter({ text: 'BDX Trades ‚Ä¢ Explorar Comunidad' })
        .setTimestamp();

    const membershipsButton = new ButtonBuilder()
        .setCustomId('view_memberships')
        .setLabel('üí∞ Ver Membres√≠as')
        .setStyle(ButtonStyle.Success)
        .setEmoji('üí∞');

    const backButton = new ButtonBuilder()
        .setCustomId('back_to_welcome')
        .setLabel('üè† Volver al Inicio')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('üè†');

    const actionRow = new ActionRowBuilder()
        .addComponents(membershipsButton, backButton);

    await interaction.editReply({ 
        embeds: [exploreEmbed], 
        components: [actionRow] 
    });
}